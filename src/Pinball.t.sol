pragma solidity ^0.8.6;

import "ds-test/test.sol";

import "./Pinball.sol";
import "./PinballHevm.sol";

contract Scores {
	bytes32[16] ball1050 = [bytes32(0x5043544600080001010000000003000d025a5040706000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000), bytes32(0x0000000000000000000000000000000000000000000000000000000000000000)];

	bytes32[16] ball5950 = [bytes32(0x5043544600080063010000000004000000000400000000040000000004000000), bytes32(0x0004000000000400000000040000000004000000000400000000040000000004), bytes32(0x0000000004000000000400000000040000000004000000000400000000040000), bytes32(0x0000040000000004000000000400000000040000000004000000000400000000), bytes32(0x0400000000040000000004000000000400000000040000000004000000000400), bytes32(0x0000000400000000040000000004000000000400000000040000000004000000), bytes32(0x0004000000000400000000040000000004000000000400000000040000000004), bytes32(0x0000000004000000000400000000040000000004000000000400000000040000), bytes32(0x0000040000000004000000000400000000040000000004000000000400000000), bytes32(0x0400000000040000000004000000000400000000040000000004000000000400), bytes32(0x0000000400000000040000000004000000000400000000040000000004000000), bytes32(0x0004000000000400000000040000000004000000000400000000040000000004), bytes32(0x0000000004000000000400000000040000000004000000000400000000040000), bytes32(0x0000040000000004000000000400000000040000000004000000000400000000), bytes32(0x0400000000040000000004000000000400000000040000000004000000000400), bytes32(0x0000000400000000040000000004000000000400000000040000000004000000)];

	bytes32[16] ball45760 = [bytes32(0x504354460182001900e100ff38c56aa967695c50a998b7337e260fb29881ec07), bytes32(0xe0a0058ad892dcd973c016dc504070601a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a), bytes32(0x1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1414141414141414141414141414), bytes32(0x1414141414141414141414141414141414141414141414141414141414141414), bytes32(0x14141414141414141414141414141414141400150ef00fc7c800030000000000), bytes32(0x0700000000000d0000000000610000000000f10000000002a100000000000400), bytes32(0x00000000830000000000010000000000010000000000071a1a1a1a1a1a1a1a1a), bytes32(0x1a00611a1a1a1a1a1a1a1a1a1a02a11a1a1a1a1a1a1a1a1a1a00831111111111), bytes32(0x11111111110001000000000000000000e100ff8f038627eb6f3adaddcfcb0c86), bytes32(0xb53e4e175b1d16ede665306e59d9752c7b276701020304656565656565656565), bytes32(0x6501020304666666666666666666666666666666666666666666666666666666), bytes32(0x6666666666666666666666666666666666666666666666666666666666666666), bytes32(0x66000100000000040008004803002c0104020092000202009200020200920002), bytes32(0x020093000403002c010404009500e403002c010403002c010403002c01040401), bytes32(0x0f0048030133001c04009500e403002c01040301410080030141008004009500), bytes32(0xe404009500e404009500e404009500e404009500e404009500e404009500e400)];
}

contract PinballOriginalTest is DSTest, Scores {
	Pinball pb;

	function setUp() public {
		pb = new Pinball();
	}

	// Final score should be 1050, without hash commitments.
	function test_ball1050() public {
		pb.play(arrayToBytes(ball1050), 0);
	}

	// Final score should be 5950, without hash commitments.
	function test_ball5950() public {
		pb.play(arrayToBytes(ball5950), 0);
	}

	// Final score should be 45760, without hash commitments.
	function test_ball45760() public {
		pb.play(arrayToBytes(ball45760), 0);
	}

	function arrayToBytes(bytes32[16] memory arrayBall) internal pure returns (bytes memory) {
		bytes memory collect;
		for (uint i = 0; i < arrayBall.length; ++i)
		collect = bytes.concat(collect, arrayBall[i]);
		return collect;
	}
}

contract PinballHevmTest is DSTest, Scores {
	PinballHevm pb;

	function setUp() public {
		pb = new PinballHevm();
	}

	// Final score should be 1050, without hash commitments.
	function test_ball1050() public {
		pb.play(bytes32To1(ball1050), 0);
	}

	// Final score should be 5950, without hash commitments.
	function test_ball5950() public {
		pb.play(bytes32To1(ball5950), 0);
	}

	// Final score should be 45760, without hash commitments.
	function test_ball45760() public {
		pb.play(bytes32To1(ball45760), 0);
	}

	// This is the attempt to symbolically find an input that gives us a high score.
	// All the inputs here are symbolically.
	// Ideally we would have a single bytes1[512] ball, but we can't because of
	// https://github.com/dapphub/dapptools/issues/844
	// The target score we want hevm to break is in an assertion at the end of
	// PinballHevm::play
	// The input is fully symbolic now, but we could already constrain it a bit
	// here by adding PCTF at the start and other constraints on specific indices.
	function prove_high_score_letsgo(uint8[255] memory ball0, uint8[255] memory ball1, uint8[2] memory ball2) public {
		bytes1[512] memory ball;
		for (uint i = 0; i < 255; ++i)
			ball[i] = bytes1(ball0[i]);
		for (uint i = 255; i < 510; ++i)
			ball[i] = bytes1(ball1[i - 255]);
		ball[510] = bytes1(ball2[0]);
		ball[511] = bytes1(ball2[1]);
		pb.play(ball, 0);
	}

	function bytes32To1(bytes32[16] memory ball) internal pure returns (bytes1[512] memory result) {
		for (uint i = 0; i < 512; ++i)
		{
			uint idx = i / 32;
			uint shi = i % 32;
			result[i] = bytes1(ball[idx] << (shi * 8));
		}
	}
}
